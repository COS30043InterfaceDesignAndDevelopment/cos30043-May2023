"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const express = require("express");
const make_crud_1 = require("./make-crud");
const fs = require("fs");
const request = require("supertest");
const chai_1 = require("chai");
describe('CRUD via REST', () => {
    let app;
    beforeEach(() => __awaiter(void 0, void 0, void 0, function* () {
        app = express();
        app.use('/car', make_crud_1.makeCrud('car', './test'));
        // wait for makeCrud to have created storage
        yield new Promise((resolve) => setTimeout(resolve, 1));
    }));
    it('should CRUD a car via REST', () => __awaiter(void 0, void 0, void 0, function* () {
        const car = { make: 'Mercedes' };
        const expectedId = 0;
        const postResult = yield request(app)
            .post('/car')
            .send(car);
        chai_1.expect(postResult.status).to.equal(201);
        chai_1.expect(Object.assign({}, postResult.body)).to.deep.equal(Object.assign(Object.assign({}, car), { id: expectedId }));
        const getAllResult = yield request(app)
            .get('/car')
            .send();
        chai_1.expect(getAllResult.status).to.equal(200);
        chai_1.expect(getAllResult.body).to.have.lengthOf(1);
        chai_1.expect(getAllResult.body[0]).to.deep.equal(Object.assign(Object.assign({}, car), { id: expectedId }));
        const getSingleResult = yield request(app)
            .get(`/car/${expectedId}`)
            .send();
        chai_1.expect(getSingleResult.status).to.equal(200);
        chai_1.expect(getSingleResult.body).to.deep.equal(Object.assign(Object.assign({}, car), { id: expectedId }));
        const updatedCar = Object.assign(Object.assign({}, car), { make: 'BMW' });
        const putResult = yield request(app)
            .put(`/car/${expectedId}`)
            .send(updatedCar);
        chai_1.expect(putResult.status).to.equal(200);
        chai_1.expect(putResult.body).to.deep.equal(Object.assign(Object.assign({}, updatedCar), { id: expectedId }));
        const deleteResult = yield request(app)
            .delete(`/car/${expectedId}`)
            .send();
        chai_1.expect(deleteResult.status).to.equal(200);
        chai_1.expect((yield request(app).get('/car').send()).body).to.have.lengthOf(0);
        const postResultWithId = yield request(app)
            .post('/car')
            .send(Object.assign(Object.assign({}, car), { id: 42 }));
        chai_1.expect(postResultWithId.status).to.equal(201);
        chai_1.expect(Object.assign({}, postResultWithId.body)).to.deep.equal(Object.assign(Object.assign({}, car), { id: 42 }));
    }));
    it('should give 404 codes for operations on non-existing entities', () => __awaiter(void 0, void 0, void 0, function* () {
        const getResult = yield request(app)
            .get('/car/12345')
            .send();
        chai_1.expect(getResult.status).to.equal(404);
        const putResult = yield request(app)
            .put('/car/12345')
            .send({});
        chai_1.expect(putResult.status).to.equal(404);
        const deleteResult = yield request(app)
            .delete('/car/12345')
            .send({});
        chai_1.expect(deleteResult.status).to.equal(404);
    }));
    afterEach(() => {
        fs.unlinkSync('./test/car.json');
        fs.rmdirSync('./test/');
    });
});
//# sourceMappingURL=make-crud.test.js.map