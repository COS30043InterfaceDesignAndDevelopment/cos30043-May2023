"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const StorageImpl_1 = require("./StorageImpl");
const chai_1 = require("chai");
const fs = require("fs");
const path = require("path");
describe('Storage', () => {
    const storagePath = './test';
    let storage;
    before(() => __awaiter(void 0, void 0, void 0, function* () {
        storage = new StorageImpl_1.StorageImpl();
        yield storage.init('entity', storagePath);
    }));
    it('should create the storage directory if it does not exist', () => {
        chai_1.expect(fs.statSync(storagePath).isDirectory()).to.be.true;
    });
    it('should CRUD an entity', () => __awaiter(void 0, void 0, void 0, function* () {
        let entity1 = { 'a': 'b' };
        entity1 = yield storage.create(entity1);
        chai_1.expect(entity1.id).to.equal(0);
        chai_1.expect(yield storage.getAll()).to.have.lengthOf(1);
        let entity2 = { 'c': 'd' };
        entity2 = yield storage.create(entity2);
        chai_1.expect(entity2.id).to.equal(1);
        let allEntities = yield storage.getAll();
        chai_1.expect(allEntities.find(e => e.a === 'b')).not.to.be.undefined;
        chai_1.expect(allEntities.find(e => e.c === 'd')).not.to.be.undefined;
        yield storage.delete(entity2);
        allEntities = yield storage.getAll();
        chai_1.expect(allEntities).to.have.lengthOf(1);
        chai_1.expect(allEntities.find(e => e.a === 'b')).not.to.be.undefined;
        chai_1.expect(allEntities.find(e => e.c === 'd')).to.be.undefined;
        yield storage.update({ id: entity1.id, 'e': 'f' });
        chai_1.expect((yield storage.get(entity1.id)).e).to.equal('f');
        yield storage.delete(entity1);
        chai_1.expect(yield storage.getAll()).to.have.lengthOf(0);
    }));
    it('should throw an error when trying to update an entity without an ID', () => __awaiter(void 0, void 0, void 0, function* () {
        let error;
        try {
            yield storage.update({});
        }
        catch (e) {
            error = e;
        }
        chai_1.expect(error).not.to.be.undefined;
    }));
    it('should throw an error when trying to delete an entity without an ID', () => __awaiter(void 0, void 0, void 0, function* () {
        let error;
        try {
            yield storage.delete({});
        }
        catch (e) {
            error = e;
        }
        chai_1.expect(error).not.to.be.undefined;
    }));
    it('should throw an error when trying to delete an entity that does not exist', () => __awaiter(void 0, void 0, void 0, function* () {
        let error;
        try {
            yield storage.delete({ id: 12345 });
        }
        catch (e) {
            error = e;
        }
        chai_1.expect(error).not.to.be.undefined;
    }));
    after(() => {
        fs.unlinkSync(path.join(storagePath, 'entity.json'));
        fs.rmdirSync(storagePath);
    });
});
//# sourceMappingURL=StorageImpl.test.js.map