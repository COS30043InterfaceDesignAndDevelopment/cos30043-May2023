"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.makeCrud = void 0;
const express = require("express");
const StorageFactory_1 = require("./StorageFactory");
function makeCrud(entityName, storagePath) {
    const router = express.Router();
    const storage = StorageFactory_1.StorageFactory.getStorage();
    storage.init(entityName, storagePath);
    router.use(express.json());
    router.use((req, res, next) => {
        res.append('Content-Type', 'application/json');
        next();
    });
    router.get('/', (req, res) => __awaiter(this, void 0, void 0, function* () {
        res.send(yield storage.getAll());
    }));
    router.get('/:id', (req, res) => __awaiter(this, void 0, void 0, function* () {
        const entityForId = yield storage.get(+req.params.id);
        if (entityForId == null) {
            return res.status(404).send();
        }
        res.send(entityForId);
    }));
    router.post('/', (req, res) => __awaiter(this, void 0, void 0, function* () {
        const obj = req.body;
        const storedObject = yield storage.create(obj);
        res.status(201).send(storedObject);
    }));
    router.put('/:id', (req, res) => __awaiter(this, void 0, void 0, function* () {
        const existingObject = yield storage.get(+req.params.id);
        if (existingObject == null) {
            return res.status(404).send();
        }
        const obj = req.body;
        if (obj.id !== +req.params.id) {
            obj.id = +req.params.id;
        }
        const updatedObject = yield storage.update(obj);
        res.status(200).send(updatedObject);
    }));
    router.delete('/:id', (req, res) => __awaiter(this, void 0, void 0, function* () {
        const existingObject = yield storage.get(+req.params.id);
        if (existingObject == null) {
            return res.status(404).send();
        }
        yield storage.delete(existingObject);
        res.status(200).send();
    }));
    return router;
}
exports.makeCrud = makeCrud;
//# sourceMappingURL=make-crud.js.map